/* HLR WS2014 Ãœbungsblatt 6 Aufgabe 1 HuHufschmidtTimm */

#include <stdio.h>
#include <mpi.h>
#include <sys/time.h>
#include <stdlib.h>
#include <time.h>

int main (int argc, char **argv)
{	
	char str[42];
	int size, rank, rc, dest, source, count, tag, tag2, return_signal;  
	int i;
	MPI_Status Stat;

	rc = MPI_Init (&argc, &argv);	
	if (rc != MPI_SUCCESS) 
	{
		printf ("Error starting MPI program. Terminating.\n");    	
		MPI_Abort(MPI_COMM_WORLD, rc);
    }
	MPI_Comm_rank (MPI_COMM_WORLD, &rank);	
	MPI_Comm_size (MPI_COMM_WORLD, &size);
	
	if (rank == 0)
	{
		for(i=1; i<size; i++)
		{	
			source = i;
			tag = i;
			MPI_Recv(&str, 42, MPI_CHAR, source, tag, MPI_COMM_WORLD, &Stat);
			printf("%s\n", str);			
		}
		for(i=1; i<size; i++)
		{	
			return_signal = 1;	
			dest = i;
			tag2 = i + 1;
			MPI_Send(&return_signal, 1, MPI_INTEGER, dest, tag2, MPI_COMM_WORLD);
		}
	}
	else
	{	 
		struct timeval time;	
		struct tm *tm;
		char hostname[10];
		gettimeofday(&time, NULL);
		tm = localtime(&time.tv_sec);
		gethostname(hostname, sizeof(hostname));
		sprintf(str,"%s: %d-%d-%d %d:%02d:%02d.%d", hostname, tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec, time.tv_usec);
		
		dest = 0;
		tag = rank;
		tag2 = rank + 1;
		MPI_Send(&str, 42, MPI_CHAR, dest, tag, MPI_COMM_WORLD);
		MPI_Recv(&return_signal, 1, MPI_INTEGER, 0, tag2, MPI_COMM_WORLD, &Stat);
		//if(return_signal)
		//{
			//printf("Rang %d beendet jetzt!\n", rank);
		//}
		
	}
	MPI_Barrier(MPI_COMM_WORLD);
	printf("Rang %d beendet jetzt!\n", rank);
	MPI_Finalize();
	return 0;
}
