Ergebnisse mit time und gprof:
==============================
Mit dem Original Makefile:
$ time ./partdiff-seq 1 2 128 1 2 1024 > /dev/null
real    1m46.372s
user    1m45.203s
sys     0m0.537s


Der gleiche Lauf mit modifiziertem Makefile: -pg
$ time ./partdiff-seq 1 2 128 1 2 1024 > /dev/null
...
$ gprof -b ./partdiff-seq
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 96.45     81.21    81.21        1    81.21    84.08  calculate
  3.41     84.08     2.87 1088472064     0.00     0.00  getResiduum
  0.26     84.30     0.22        1     0.22     0.22  initMatrices
  0.00     84.30     0.00        4     0.00     0.00  allocateMemory
  0.00     84.30     0.00        1     0.00     0.00  AskParams
  0.00     84.30     0.00        1     0.00     0.00  DisplayMatrix
  0.00     84.30     0.00        1     0.00     0.00  allocateMatrices
  0.00     84.30     0.00        1     0.00     0.00  displayStatistics
  0.00     84.30     0.00        1     0.00     0.00  freeMatrices
  0.00     84.30     0.00        1     0.00     0.00  initVariables


Fazit: Die meiste zeit wird in calculate und dann in getResiduum verbraten.


Ergebnisse *ohne* Änderungen des Quellcodes:
============================================
Immer gestartet mit:
$srun time ./partdiff-seq 1 2 128 1 2 1024 > /dev/null

gcc mit -O0:
------------
54.82user 0.00system 0:55.00elapsed 99%CPU (0avgtext+0avgdata 69504maxresident)k
40inputs+8outputs (0major+9068minor)pagefaults 0swaps

gcc mit -O1:
------------
22.78user 0.02system 0:22.88elapsed 99%CPU (0avgtext+0avgdata 69440maxresident)k
40inputs+8outputs (0major+6283minor)pagefaults 0swaps

gcc mit -O2:
------------
21.92user 0.00system 0:22.00elapsed 99%CPU (0avgtext+0avgdata 69440maxresident)k
40inputs+8outputs (0major+6202minor)pagefaults 0swaps

21.92user 0.01system 0:22.01elapsed 99%CPU (0avgtext+0avgdata 69424maxresident)k
40inputs+8outputs (0major+6202minor)pagefaults 0swaps


gcc mit -O3:
------------
21.20user 0.00system 0:21.28elapsed 99%CPU (0avgtext+0avgdata 69456maxresident)k
48inputs+8outputs (1major+6138minor)pagefaults 0swaps

Fazit: Den größeten Effekt bringt -O1 

Diverse Parameter getestet mit gcc -O1
--------------------------------------
$ salloc
salloc: Granted job allocation 69439
$ srun --jobid 69439 hostname
west2

Gauss-Seidel, ohne Störfunktion
$ srun --jobid 69439 time ./partdiff-seq 1 1 128 1 2 1024 > /dev/null
17.90user 0.00system 0:17.97elapsed 99%CPU (0avgtext+0avgdata 36048maxresident)k
0inputs+8outputs (0major+3117minor)pagefaults 0swaps

Jacobi, ohne Störfunktion:
$ srun --jobid 69439 time ./partdiff-seq 1 2 128 1 2 1024 > /dev/null
22.92user 0.01system 0:23.01elapsed 99%CPU (0avgtext+0avgdata 69440maxresident)k
40inputs+8outputs (0major+6291minor)pagefaults 0swaps

Gauss-Seidel, mit Störfunktion
$ srun --jobid 69439 time ./partdiff-seq 1 1 128 2 2 1024 > /dev/null
85.04user 0.00system 1:25.29elapsed 99%CPU (0avgtext+0avgdata 36240maxresident)k
0inputs+8outputs (0major+6362minor)pagefaults 0swaps

Jacobi, mit Störfunktion:
$ srun --jobid 69439 time ./partdiff-seq 1 2 128 2 2 1024 > /dev/null
87.88user 0.00system 1:28.15elapsed 99%CPU (0avgtext+0avgdata 69616maxresident)k
0inputs+8outputs (0major+12774minor)pagefaults 0swaps

Fazit: 1. Gauss-Seidel ist schneller als Jacobi. 2. Die Stöfunktion stört.

===========================================
Änderungen am Quellcode:
00000000000000000000000000000000000000000000

Manuelle Änderung der Reihenfolge der verschachtelten Loops. [severe]
Reihenfolge der Elemente im Star verändert, sodass die js aus i direkt nebeneinander abgearbeitet werden, Rundungsfehler könnten sich veränderen. [minor]
Überflüssige Abfrage Entfernt [severe]
manuelles Vectorisieren der Matrizen für Caching mittels Pointer arithmitik [severe]
static machen von getresiduum [ultra]
änderen von i++ nach ++i (prä und post increments) [minor]
Ergebnisse *mit* Änderungen des Quellcodes:
============================================

TODO



